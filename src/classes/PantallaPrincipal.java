/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.io.RandomAccessFile;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *
 * @author Krista
 */
public class PantallaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listCamposPantalla = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel_Title_Campos = new javax.swing.JLabel();
        jButton_agregar = new javax.swing.JButton();
        jButton_modificar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jButton_hacerSecundaria = new javax.swing.JButton();
        jButton_hacerPrincipal = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_campos = new javax.swing.JList<>();
        jLabel_BG_campos = new javax.swing.JLabel();
        pantallaCrearCampos = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        tf_NombreCampo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tipoEntero = new javax.swing.JRadioButton();
        tipoDecimal = new javax.swing.JRadioButton();
        tipoString = new javax.swing.JRadioButton();
        tipoChar = new javax.swing.JRadioButton();
        CrearCampo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rb_LlavePrincipal = new javax.swing.JRadioButton();
        rb_LlaveSecundaria = new javax.swing.JRadioButton();
        js_tamanioCadena = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        rb_campoNormal = new javax.swing.JRadioButton();
        labelFondo = new javax.swing.JLabel();
        GrupoTipoDeDato = new javax.swing.ButtonGroup();
        menuRegistros = new javax.swing.JPopupMenu();
        AgregarRegistro = new javax.swing.JMenuItem();
        SalvarCambiosTemporalmente = new javax.swing.JMenuItem();
        EliminarRegistros = new javax.swing.JMenuItem();
        LlavePrincipal_Secundaria = new javax.swing.ButtonGroup();
        jd_nuevoRegistro = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt_campos = new javax.swing.JTable();
        jb_crearRegistro = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jd_buscarRegistro = new javax.swing.JDialog();
        jScrollPane5 = new javax.swing.JScrollPane();
        jt_busqueda = new javax.swing.JTable();
        jtf_buscar = new javax.swing.JTextField();
        jb_buscarRegistro = new javax.swing.JButton();
        jb_clearCargado = new javax.swing.JButton();
        jb_modificarRegistro = new javax.swing.JButton();
        jb_eliminarRegistro = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jd_modificarRegistro = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jtf_actual = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jtf_nuevo = new javax.swing.JTextField();
        jb_modificarRegistroAceptar = new javax.swing.JButton();
        jl_mod_BG = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jd_modificarCampo = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jtf_actualCampo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jtf_nuevoCampo = new javax.swing.JTextField();
        jb_modificarCampoAceptar = new javax.swing.JButton();
        jl_mod_BG1 = new javax.swing.JLabel();
        jPanel_BackGround = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Display = new javax.swing.JTable();
        jb_siguiente = new javax.swing.JButton();
        jpb_porcentaje = new javax.swing.JProgressBar();
        jb_anterior = new javax.swing.JButton();
        jb_final = new javax.swing.JButton();
        jb_inicio = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabelPrincipal = new javax.swing.JLabel();
        jLabel_current = new javax.swing.JLabel();
        jLabel_Title = new javax.swing.JLabel();
        jLabel_BG = new javax.swing.JLabel();
        MenuPrincipal = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        closeFile = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Campos = new javax.swing.JMenu();
        jMenuItem_listarCampos = new javax.swing.JMenuItem();
        Registros = new javax.swing.JMenu();
        introRegistros = new javax.swing.JMenuItem();
        searchRegistros = new javax.swing.JMenuItem();
        listRegistros = new javax.swing.JMenuItem();
        Indices = new javax.swing.JMenu();
        newIndex = new javax.swing.JMenuItem();
        reindexFile = new javax.swing.JMenuItem();
        Estandarizacion = new javax.swing.JMenu();
        exportExcel = new javax.swing.JMenuItem();
        exportXML = new javax.swing.JMenuItem();

        listCamposPantalla.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Title_Campos.setFont(new java.awt.Font("BankGothic Lt BT", 3, 36)); // NOI18N
        jLabel_Title_Campos.setForeground(new java.awt.Color(65, 67, 106));
        jLabel_Title_Campos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Title_Campos.setText("Campos");
        jLabel_Title_Campos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 67, 106), 3));
        jPanel4.add(jLabel_Title_Campos, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 210, -1));

        jButton_agregar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_agregar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_agregar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_agregar.setText("Agregar");
        jButton_agregar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_agregar.setBorderPainted(false);
        jButton_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_agregarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 100, -1));

        jButton_modificar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_modificar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_modificar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_modificar.setText("Modificar");
        jButton_modificar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_modificar.setBorderPainted(false);
        jButton_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_modificarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 100, -1));

        jButton_eliminar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_eliminar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_eliminar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_eliminar.setBorderPainted(false);
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 100, -1));

        jButton_hacerSecundaria.setBackground(new java.awt.Color(65, 67, 106));
        jButton_hacerSecundaria.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_hacerSecundaria.setForeground(new java.awt.Color(255, 204, 0));
        jButton_hacerSecundaria.setText("Hacer llave secundaria");
        jButton_hacerSecundaria.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_hacerSecundaria.setBorderPainted(false);
        jButton_hacerSecundaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hacerSecundariaActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_hacerSecundaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 220, -1));

        jButton_hacerPrincipal.setBackground(new java.awt.Color(65, 67, 106));
        jButton_hacerPrincipal.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_hacerPrincipal.setForeground(new java.awt.Color(255, 204, 0));
        jButton_hacerPrincipal.setText("Hacer llave principal");
        jButton_hacerPrincipal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_hacerPrincipal.setBorderPainted(false);
        jButton_hacerPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hacerPrincipalActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_hacerPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 220, -1));

        jList_campos.setModel(new DefaultListModel());
        jList_campos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_camposMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList_campos);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 197, 234));

        jLabel_BG_campos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado 2.png"))); // NOI18N
        jPanel4.add(jLabel_BG_campos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 390));

        listCamposPantalla.getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 390));

        pantallaCrearCampos.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Nombre del Campo:");
        pantallaCrearCampos.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 60, 132, -1));
        pantallaCrearCampos.getContentPane().add(tf_NombreCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 56, 162, -1));

        jLabel2.setText("Tipo De Dato del Campo:");
        pantallaCrearCampos.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 165, -1, -1));

        tipoEntero.setBackground(new java.awt.Color(142, 63, 65));
        GrupoTipoDeDato.add(tipoEntero);
        tipoEntero.setText("Entero");
        pantallaCrearCampos.getContentPane().add(tipoEntero, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 109, 110, -1));

        GrupoTipoDeDato.add(tipoDecimal);
        tipoDecimal.setText("Decimal");
        pantallaCrearCampos.getContentPane().add(tipoDecimal, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 143, 110, -1));

        GrupoTipoDeDato.add(tipoString);
        tipoString.setSelected(true);
        tipoString.setText("Cadena de Texto");
        tipoString.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tipoStringStateChanged(evt);
            }
        });
        pantallaCrearCampos.getContentPane().add(tipoString, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 177, -1, -1));

        GrupoTipoDeDato.add(tipoChar);
        tipoChar.setText("Caracter");
        pantallaCrearCampos.getContentPane().add(tipoChar, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 211, 110, -1));

        CrearCampo.setText("Aceptar");
        CrearCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearCampoMouseClicked(evt);
            }
        });
        pantallaCrearCampos.getContentPane().add(CrearCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 102, -1));

        jLabel3.setText("Tipo de Llave");
        pantallaCrearCampos.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 100, -1));

        LlavePrincipal_Secundaria.add(rb_LlavePrincipal);
        rb_LlavePrincipal.setText("Principal");
        pantallaCrearCampos.getContentPane().add(rb_LlavePrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, -1, -1));

        LlavePrincipal_Secundaria.add(rb_LlaveSecundaria);
        rb_LlaveSecundaria.setText("Secundaria");
        pantallaCrearCampos.getContentPane().add(rb_LlaveSecundaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, -1, -1));

        js_tamanioCadena.setModel(new javax.swing.SpinnerNumberModel(15, 2, 255, 1));
        js_tamanioCadena.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                js_tamanioCadenaStateChanged(evt);
            }
        });
        pantallaCrearCampos.getContentPane().add(js_tamanioCadena, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 180, 70, -1));

        jLabel4.setText("Tamaño Cadena");
        pantallaCrearCampos.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, -1, -1));

        LlavePrincipal_Secundaria.add(rb_campoNormal);
        rb_campoNormal.setSelected(true);
        rb_campoNormal.setText("Campo Ordinario");
        pantallaCrearCampos.getContentPane().add(rb_campoNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 340, -1, -1));

        labelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado_3.png"))); // NOI18N
        labelFondo.setPreferredSize(new java.awt.Dimension(1587, 545));
        pantallaCrearCampos.getContentPane().add(labelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 450));

        AgregarRegistro.setText("Agregar Nuevo Registro");
        AgregarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarRegistroActionPerformed(evt);
            }
        });
        menuRegistros.add(AgregarRegistro);

        SalvarCambiosTemporalmente.setText("Guardar temporalmente");
        menuRegistros.add(SalvarCambiosTemporalmente);

        EliminarRegistros.setText("Eliminar Registro Seleccionado");
        menuRegistros.add(EliminarRegistros);

        jd_nuevoRegistro.setResizable(false);
        jd_nuevoRegistro.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jt_campos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos", "Valores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_campos.setCellSelectionEnabled(true);
        jScrollPane4.setViewportView(jt_campos);

        jd_nuevoRegistro.getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 590, 290));

        jb_crearRegistro.setText("Aceptar");
        jb_crearRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_crearRegistroActionPerformed(evt);
            }
        });
        jd_nuevoRegistro.getContentPane().add(jb_crearRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 400, -1, -1));

        jLabel5.setFont(new java.awt.Font("BankGothic Md BT", 3, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Nuevo Registro");
        jd_nuevoRegistro.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 370, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado_3.png"))); // NOI18N
        jd_nuevoRegistro.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 450));

        jd_buscarRegistro.setResizable(false);
        jd_buscarRegistro.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jt_busqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos", "Valores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_busqueda.setColumnSelectionAllowed(true);
        jt_busqueda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jt_busquedaFocusGained(evt);
            }
        });
        jt_busqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_busquedaMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jt_busqueda);

        jd_buscarRegistro.getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 590, 270));
        jd_buscarRegistro.getContentPane().add(jtf_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 410, 30));

        jb_buscarRegistro.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        jb_buscarRegistro.setText("Buscar");
        jb_buscarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_buscarRegistroActionPerformed(evt);
            }
        });
        jd_buscarRegistro.getContentPane().add(jb_buscarRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 70, 80, 30));

        jb_clearCargado.setText("Clear");
        jb_clearCargado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_clearCargadoActionPerformed(evt);
            }
        });
        jd_buscarRegistro.getContentPane().add(jb_clearCargado, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, -1, -1));

        jb_modificarRegistro.setText("Modificar Registro");
        jb_modificarRegistro.setEnabled(false);
        jb_modificarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_modificarRegistroActionPerformed(evt);
            }
        });
        jd_buscarRegistro.getContentPane().add(jb_modificarRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, 140, -1));

        jb_eliminarRegistro.setText("Eliminar Registro");
        jb_eliminarRegistro.setEnabled(false);
        jb_eliminarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_eliminarRegistroActionPerformed(evt);
            }
        });
        jd_buscarRegistro.getContentPane().add(jb_eliminarRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 400, 140, -1));

        jLabel7.setFont(new java.awt.Font("BankGothic Md BT", 3, 36)); // NOI18N
        jLabel7.setText("Buscar Registro");
        jd_buscarRegistro.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 20, 370, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado_3.png"))); // NOI18N
        jd_buscarRegistro.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 450));

        jLabel9.setFont(new java.awt.Font("BankGothic Md BT", 3, 36)); // NOI18N
        jLabel9.setText("Buscar Registro");
        jd_buscarRegistro.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 370, -1));

        jd_modificarRegistro.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtf_actual.setEditable(false);
        jPanel1.add(jtf_actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 170, 30));

        jLabel10.setText("Valor Actual: ");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        jLabel11.setText("Nuevo Valor");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));
        jPanel1.add(jtf_nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 170, 30));

        jb_modificarRegistroAceptar.setText("Aceptar");
        jb_modificarRegistroAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_modificarRegistroAceptarActionPerformed(evt);
            }
        });
        jPanel1.add(jb_modificarRegistroAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 130, -1));

        jl_mod_BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado 2.png"))); // NOI18N
        jPanel1.add(jl_mod_BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        jd_modificarRegistro.getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        jd_modificarCampo.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setFont(new java.awt.Font("BankGothic Lt BT", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Modificar Campo");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 190, 40));

        jtf_actualCampo.setEditable(false);
        jPanel2.add(jtf_actualCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 170, 30));

        jLabel12.setText("Nombre Actual: ");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        jLabel13.setText("Nuevo Nombre:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));
        jPanel2.add(jtf_nuevoCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, 30));

        jb_modificarCampoAceptar.setText("Aceptar");
        jb_modificarCampoAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_modificarCampoAceptarActionPerformed(evt);
            }
        });
        jPanel2.add(jb_modificarCampoAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 130, -1));

        jl_mod_BG1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado 2.png"))); // NOI18N
        jPanel2.add(jl_mod_BG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        jd_modificarCampo.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon("./src/recursos/x.png").getImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_BackGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Display.setModel(new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jTable_Display.setGridColor(new java.awt.Color(153, 0, 204));
        jTable_Display.setRowSelectionAllowed(false);
        jTable_Display.setShowHorizontalLines(false);
        jTable_Display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_DisplayMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_Display);

        jPanel_BackGround.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 950, 350));

        jb_siguiente.setText("Siguiente");
        jb_siguiente.setEnabled(false);
        jb_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_siguienteActionPerformed(evt);
            }
        });
        jPanel_BackGround.add(jb_siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, -1, -1));
        jPanel_BackGround.add(jpb_porcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 950, -1));

        jb_anterior.setText("Anterior");
        jb_anterior.setEnabled(false);
        jb_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_anteriorActionPerformed(evt);
            }
        });
        jPanel_BackGround.add(jb_anterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 490, -1, -1));

        jb_final.setText("Final");
        jb_final.setEnabled(false);
        jb_final.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_finalActionPerformed(evt);
            }
        });
        jPanel_BackGround.add(jb_final, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 490, -1, -1));

        jb_inicio.setText("Inicio");
        jb_inicio.setEnabled(false);
        jb_inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_inicioActionPerformed(evt);
            }
        });
        jPanel_BackGround.add(jb_inicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, -1, -1));

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel_BackGround.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 490, -1, -1));

        jLabelPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPrincipal.setText("Llave Principal: ");
        jPanel_BackGround.add(jLabelPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 340, 30));

        jLabel_current.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_current.setForeground(new java.awt.Color(255, 150, 119));
        jLabel_current.setText("Current File: ");
        jPanel_BackGround.add(jLabel_current, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 370, -1));

        jLabel_Title.setFont(new java.awt.Font("BankGothic Md BT", 3, 36)); // NOI18N
        jLabel_Title.setForeground(new java.awt.Color(255, 150, 119));
        jLabel_Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Title.setText("File X Manager");
        jLabel_Title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel_BackGround.add(jLabel_Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 370, -1));

        jLabel_BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado.png"))); // NOI18N
        jPanel_BackGround.add(jLabel_BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 530));

        getContentPane().add(jPanel_BackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Archivo.setText("Archivo");
        Archivo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFile.setText("Nuevo Archivo");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        Archivo.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFile.setText("Abrir Archivo");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        Archivo.add(openFile);

        saveFile.setText("Guardar Archivo");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        Archivo.add(saveFile);

        closeFile.setText("Cerrar Archivo");
        closeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileActionPerformed(evt);
            }
        });
        Archivo.add(closeFile);

        Exit.setText("Salir");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Archivo.add(Exit);

        MenuPrincipal.add(Archivo);

        Campos.setText("Campos");
        Campos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuItem_listarCampos.setText("Listar Campos");
        jMenuItem_listarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_listarCamposActionPerformed(evt);
            }
        });
        Campos.add(jMenuItem_listarCampos);

        MenuPrincipal.add(Campos);

        Registros.setText("Registros");
        Registros.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        introRegistros.setText("Introducir Registros");
        introRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introRegistrosActionPerformed(evt);
            }
        });
        Registros.add(introRegistros);

        searchRegistros.setText("Buscar Registros");
        searchRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRegistrosActionPerformed(evt);
            }
        });
        Registros.add(searchRegistros);

        listRegistros.setText("Listar Registros");
        listRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRegistrosActionPerformed(evt);
            }
        });
        Registros.add(listRegistros);

        MenuPrincipal.add(Registros);

        Indices.setText("Indices");
        Indices.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newIndex.setText("Crear Indices");
        Indices.add(newIndex);

        reindexFile.setText("Re-indexar Archivos");
        Indices.add(reindexFile);

        MenuPrincipal.add(Indices);

        Estandarizacion.setText("Estandarizacion");
        Estandarizacion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        exportExcel.setText("Exportar en archivo Excel");
        exportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcelActionPerformed(evt);
            }
        });
        Estandarizacion.add(exportExcel);

        exportXML.setText("Exportar en XML con Schema");
        exportXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportXMLActionPerformed(evt);
            }
        });
        Estandarizacion.add(exportXML);

        MenuPrincipal.add(Estandarizacion);

        setJMenuBar(MenuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        if (archivoCargado != null) {
            closeFileActionPerformed(evt); // Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
            // porque por default no hay archivo cargado
        }
        JFileChooser jfc = new JFileChooser("./Files");//instanciar
        nuevo = true;
        // y agregar una extension que filtre
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de Registro X", "xfile");
        jfc.setFileFilter(filtro);
        int seleccion = jfc.showSaveDialog(this); // muestre la ventana
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = null;

            path = jfc.getSelectedFile().getPath();

            if (!path.endsWith(".xfile")) {
                FileOutputStream fs = null;
                try {
                    //si el filtro es archivo de texto
                    fichero = new File(path + ".xfile");//agarre el archivo y concatene la extension
                    String indexFileName = path;
                    System.out.println(path);
                    File archivoIndicesAux = new File(indexFileName + ".index");
                    fs = new FileOutputStream(archivoIndicesAux);
                    ObjectOutputStream os = new ObjectOutputStream(fs);
                    BTree<Campo, Integer> indices = new BTree<>(3);
                    os.writeObject(indices);
                    os.flush();
                    os.close();
                    archivoIndices = archivoIndicesAux;
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fs.close();
                    } catch (IOException ex) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {

                JOptionPane.showMessageDialog(this, "El archivo ya existe.", "Error.",
                        JOptionPane.ERROR_MESSAGE);
                nuevo = false;
                return;
            }
            InsertMetadataInNewFile(fichero);
            CrearXML(fichero);
            JOptionPane.showMessageDialog(this, "Archivo creado exitosamente.");
            archivoCargado = fichero;
            archivoEnUso = new ArchivoDeRegitstro(archivoCargado, archivoIndices);
            jLabel_current.setText("Current file: " + archivoCargado.getName());
            jTable_Display.setModel(new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
            //archivoTemporal = new File(archivoCargado.getPath() + archivoCargado.getName() + "-temp.xfile");
            saved = true;
            nuevo = false;
            jButton_agregar.setEnabled(true);
            jButton_modificar.setEnabled(true);
            jButton_eliminar.setEnabled(true);
            jButton_hacerPrincipal.setEnabled(true);
            //} catch (IOException e) {
            //}
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        try {
            if (archivoCargado != null) {
                closeFileActionPerformed(evt); //Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
                // porque por default no hay archivo cargado
            }
            nuevo = false;
            JFileChooser jfc = new JFileChooser("./Files"); //donde deseamos que aparezca
            //crear los filtros
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Registro X", "xfile");
            //setear los filtros
            jfc.setFileFilter(filtro);//forma 1: marcado como seleccionado
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION && jfc.getSelectedFile().isFile()) {
                File archiAuxNoSeCual = jfc.getSelectedFile();

                String pathParaCargar = archiAuxNoSeCual.getPath();

                if (pathParaCargar.endsWith(".xfile")) {
                    pathParaCargar = pathParaCargar.substring(0, pathParaCargar.length() - 6);
                    pathParaCargar += ".index";
                }

//                System.out.println(pathParaCargar);
                File archivoIndicesACargar = new File(pathParaCargar);
                loadFile(archiAuxNoSeCual, archivoIndicesACargar);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        if (!verifyOpen()) {
            return;
        }

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {
            if (!verifyOpen()) {
                return;
            }
            if (saved) {
                return;
            }
//        try ( Scanner sc = new Scanner(archivoCargado)) {
//            // Read the first line
//            String line = sc.nextLine();
//            // Divide the metadata fields
//            String[] metadata = line.split("\\?");
//            String nombreCampos = "";
//            for (Campo campo : archivoEnUso.getCamposDelArchivo()) {
//                nombreCampos += campo.getNombreCampo();
//                if (campo instanceof CampoEntero) {//Este bloque lo hice asi para no tener que almacernar como objeto binario los campos y tener un identificador de su tipo--Nuila
//                    nombreCampos += "_int|";
//                } else if (campo instanceof CampoDecimal) {
//                    nombreCampos += "_dec|";
//                } else if (campo instanceof CampoTexto) {
//                    nombreCampos += "_string|";
//                } else if (campo instanceof CampoCaracter) {
//                    nombreCampos += "_char|";
//                }
//            }
//            metadata[2] = nombreCampos;
//
//            String tempLlave = String.valueOf(archivoEnUso.getLlavePrincipal());
//
//            String aux2 = Arrays.toString(metadata);
//
//            // Cut off the surrounding brackets
//            aux2 = aux2.substring(1, aux2.length() - 1);
//            if (metadata.length < 7) {
//                aux2 += "?" + tempLlave;
//            } else {
//                metadata[6] = tempLlave;
//            }
//
//            if (metadata.length < 8) {
//                aux2 += "?";
//                for (int i = 0; i < archivoEnUso.getSecundarias().size(); i++) {
//                    aux2 = +i + "|";
//                }
//            } else {
//                String tempLlavesSecundarias = "";
//                for (Integer secundaria : archivoEnUso.getSecundarias()) {
//                    tempLlavesSecundarias += String.valueOf(secundaria) + "|";
//                }
//                metadata[7] = tempLlavesSecundarias;
//                aux2 += tempLlavesSecundarias + "?";
//            }
//            //Replace the commas with ?
//            aux2 = aux2.replaceAll(", ", "?");
//
//            // Replace multiple spaces with single spaces
//            aux2 = aux2.replaceAll(" +", " ");
//
//            FileWriter fw = new FileWriter(archivoCargado, false);
//            BufferedWriter bw = new BufferedWriter(fw);
//            bw.write(aux2);
//            bw.flush();
//            bw.close();
//            fw.close();
//            JOptionPane.showMessageDialog(this, "El archivo se ha guardado "
//                    + "correctamente", "EXITO", JOptionPane.INFORMATION_MESSAGE);
//            saved = true;
//        } catch (IOException ex) {
//            Logger.getLogger(classes.PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
            InsertMetadataInNewFile(archivoCargado);
            JOptionPane.showMessageDialog(this, "El archivo se ha guardado "
                    + "correctamente", "EXITO", JOptionPane.INFORMATION_MESSAGE);
            saved = true;
        } catch (IOException ex) {
            //Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void closeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileActionPerformed
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                    + "archivo antes de cerrar?", "Guardar y cerrar.",
                    JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                saveFileActionPerformed(evt);
            }
            saved = true;
        }
        jLabel_current.setText("Current File:");
        archivoCargado = null;

        clearDisplay(true);

        //RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw");
        //raf.seek(0);
        //System.out.println(raf.readLine());
        jLabelPrincipal.setText("Llave principal: ");

        jb_inicio.setEnabled(true);
        jb_final.setEnabled(true);
        jb_anterior.setEnabled(true);
        jb_siguiente.setEnabled(true);

    }//GEN-LAST:event_closeFileActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                    + "archivo antes de salir?", "Guardar y cerrar.", JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                saveFileActionPerformed(evt);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void jButton_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_agregarActionPerformed
        pantallaCrearCampos.pack();
        pantallaCrearCampos.setLocationRelativeTo(listCamposPantalla);
        pantallaCrearCampos.setModal(true);
        pantallaCrearCampos.setVisible(true);
        rb_campoNormal.setSelected(true);
    }//GEN-LAST:event_jButton_agregarActionPerformed

    private void jButton_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_modificarActionPerformed
        try {
            int selection = jList_campos.getSelectedIndex();

            // No hay nada seleccionado
            if (selection == -1) {
                JOptionPane.showMessageDialog(listCamposPantalla, "Debe seleccionar un campo.");
                return;
            }

            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

            jtf_actualCampo.setText((String) mod.getElementAt(selection));
            jtf_nuevoCampo.setText("");

            jd_modificarCampo.pack();
            jd_modificarCampo.setLocationRelativeTo(this);
            jd_modificarCampo.setModal(true);
            jd_modificarCampo.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton_modificarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        int selection = jList_campos.getSelectedIndex();
        // No hay nada seleccionado
        if (selection == -1) {
            JOptionPane.showMessageDialog(listCamposPantalla, "Debe seleccionar un campo.");
            return;
        }

        DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

        if (selection == archivoEnUso.getLlavePrincipal()) {
            JOptionPane.showMessageDialog(listCamposPantalla, "El campo seleccionado "
                    + "es llave principal, no puede ser eliminado. Asigne otro campo como "
                    + "llave primaria antes de eliminar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int remove = JOptionPane.showConfirmDialog(listCamposPantalla, "¿Desea eliminar el "
                + "campo " + ((String) mod.get(selection)).strip() + "?", "Eliminar campo.",
                JOptionPane.YES_NO_OPTION);

        if (remove != JOptionPane.YES_OPTION) {
            return;
        }

        mod.remove(selection);

        archivoEnUso.getCamposDelArchivo().remove(selection);

        if (archivoEnUso.getLlavePrincipal() > selection) {
            archivoEnUso.setLlavePrincipal(archivoEnUso.getLlavePrincipal() - 1);
        }

        archivoEnUso.updateSecondaryKeys(selection);

        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        String dataAux[] = new String[archivoEnUso.getCamposDelArchivo().size()];
        for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
            dataAux[i] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25);
        }
        model.setColumnIdentifiers(dataAux);
        JOptionPane.showMessageDialog(listCamposPantalla, "Campo eliminado con éxito.",
                "REALIZADO", JOptionPane.INFORMATION_MESSAGE);

        saved = false;

    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jMenuItem_listarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_listarCamposActionPerformed
        if (!verifyOpen()) {
            return;
        }
        listCamposPantalla.pack();
        listCamposPantalla.setLocationRelativeTo(this);
        listCamposPantalla.setModal(true);
        listCamposPantalla.setVisible(true);
    }//GEN-LAST:event_jMenuItem_listarCamposActionPerformed

    private void CrearCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearCampoMouseClicked
        String nombreCampo = tf_NombreCampo.getText();
        nombreCampo = nombreCampo.strip().toUpperCase();

        boolean repetido = false;
        if (nombreCampo == null || nombreCampo.equals("")) {
            return;
        }
        if (nombreCampo.length() > 25) {
            JOptionPane.showMessageDialog(pantallaCrearCampos, "El campo no puede tener un nombre mayor a 25",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombreSinEspacios = nombreCampo;

        for (int i = nombreCampo.length(); i < 25; i++) {
            nombreCampo += " ";
        }
        String auxValidacion;
        for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
            auxValidacion = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
            if (auxValidacion.equalsIgnoreCase(nombreCampo)) { //Checks repetition
                repetido = true;
                break;
            }
        }
        if (repetido) {
            JOptionPane.showMessageDialog(pantallaCrearCampos, "El campo ya existe. Intente con otro nombre",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();
            m.addColumn(nombreSinEspacios);
            jTable_Display.setModel(m);

            if (tipoEntero.isSelected()) {
                CampoEntero campo = new CampoEntero(nombreCampo + "_int");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoDecimal.isSelected()) {
                CampoDecimal campo = new CampoDecimal(nombreCampo + "_dec");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoChar.isSelected()) {
                CampoCaracter campo = new CampoCaracter(nombreCampo + "_car");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoString.isSelected()) {
                CampoTexto campo = new CampoTexto(nombreCampo + "_str");
                campo.setLongitud((Integer) js_tamanioCadena.getValue());
                js_tamanioCadena.setValue(15);
                archivoEnUso.getCamposDelArchivo().add(campo);
            }
            if (archivoEnUso.getLlavePrincipal() != -1) {
                tieneLlavePrincipal = true;
            }
            if (rb_LlavePrincipal.isSelected()) {

                if (!tieneLlavePrincipal) {
                    jLabelPrincipal.setText("Llave principal: " + nombreSinEspacios);
                    archivoEnUso.setLlavePrincipal(archivoEnUso.getCamposDelArchivo().size() - 1);
                    tieneLlavePrincipal = true;
                } else {
                    int seleccion = JOptionPane.showConfirmDialog(pantallaCrearCampos, "¿Desea cambiar la llave principal a este campo?",
                            "Cambiar llave principal", JOptionPane.INFORMATION_MESSAGE);
                    if (seleccion == JOptionPane.YES_OPTION) {
                        jLabelPrincipal.setText("Llave principal: " + nombreSinEspacios);
                        archivoEnUso.setLlavePrincipal(archivoEnUso.getCamposDelArchivo().size() - 1);
                    }
                }

            } else if (rb_LlaveSecundaria.isSelected()) {
                archivoEnUso.getSecundarias().add(archivoEnUso.getCamposDelArchivo().size() - 1);
            }
            JOptionPane.showMessageDialog(pantallaCrearCampos, "Campo agregado exitosamente.");
            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();
            mod.addElement(nombreSinEspacios);
            jList_campos.setModel(mod);

            saved = false;
            tf_NombreCampo.setText("");
            tipoString.setSelected(true);
            rb_campoNormal.setSelected(true);
        }
    }//GEN-LAST:event_CrearCampoMouseClicked

    private void jTable_DisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_DisplayMouseClicked
        if (evt.isMetaDown()) {
            menuRegistros.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable_DisplayMouseClicked

    private void jList_camposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_camposMouseClicked
        if (evt.isMetaDown()) {
            menuRegistros.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList_camposMouseClicked

    private void AgregarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarRegistroActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        int rows = jTable_Display.getRowCount();
        Registro r = new Registro(rows);
        for (int i = 0; i < model.getColumnCount(); i++) {
            String aux = model.getValueAt(0, i).toString();
            if (archivoEnUso.getCamposDelArchivo().get(i) instanceof CampoCaracter) {
                CampoCaracter temp = new CampoCaracter(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                Character valor = aux.charAt(0);
                temp.setValor(valor);
                r.añadirCampo(temp);
            } else if (archivoEnUso.getCamposDelArchivo().get(i) instanceof CampoDecimal) {
                CampoDecimal temp = new CampoDecimal(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                Double valor = Double.parseDouble(aux);
                temp.setValor(valor);
                r.añadirCampo(temp);
            } else if (archivoEnUso.getCamposDelArchivo().get(i) instanceof CampoEntero) {
                CampoEntero temp = new CampoEntero(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                Integer valor = Integer.parseInt(aux);
                temp.setValor(valor);
                r.añadirCampo(temp);
                //Class temp = archivoEnUso;
            } else if (archivoEnUso.getCamposDelArchivo().get(i) instanceof CampoTexto) {
                CampoTexto temp = new CampoTexto(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                temp.setTexto(aux);
                r.añadirCampo(temp);
            }
        }
//        archivoEnUso.getRegistros().insertarAlFinal(r);
        System.out.println("--------------------");
        //model.removeRow(jTable_Display.getSelectedRow());
        for (int i = 0; i < model.getRowCount(); i++) {
            model.removeRow(i);
        }
//        for (int i = 0; i < archivoEnUso.getRegistros().longitud(); i++) {
//            System.out.println(((Registro) archivoEnUso.getRegistros().obtener(i)).getCampos());
//        }

        Object[] row = new Object[archivoEnUso.getCamposDelArchivo().size()];
        for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
            row[i] = "";
        }
        model.addRow(row);
//        for (int i = 0; i < archivoEnUso.getRegistros().longitud(); i++) {
//            for (int j = 0; j < archivoEnUso.getCamposDelArchivo().size(); j++) {
//                row[j] = archivoEnUso.getRegistros().obtener(i).getCampos().get(j).toString();
//            }
//            model.addRow(row);
//        }
        jTable_Display.setModel(model);
    }//GEN-LAST:event_AgregarRegistroActionPerformed

    private void js_tamanioCadenaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_js_tamanioCadenaStateChanged

    }//GEN-LAST:event_js_tamanioCadenaStateChanged

    private void tipoStringStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tipoStringStateChanged
        if (tipoString.isSelected()) {
            js_tamanioCadena.setEnabled(true);
        } else {
            js_tamanioCadena.setEnabled(false);
        }
    }//GEN-LAST:event_tipoStringStateChanged

    private void jb_crearRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_crearRegistroActionPerformed

        if (jt_campos.getCellEditor() != null) {
            jt_campos.getCellEditor().stopCellEditing();
        }

        DefaultTableModel mod = (DefaultTableModel) jt_campos.getModel();

        //JOptionPane.showMessageDialog(jd_nuevoRegistro, "Escribiendo el registro en el archivo.");
        Registro r = new Registro(mod.getRowCount());

        int lp = archivoEnUso.getLlavePrincipal();

        //Validar al implementar availlist
        int RRN;

        if (archivoEnUso.getAvailList().vacia()) {
            RRN = archivoEnUso.getNoRegistros();
        } else {
            RRN = archivoEnUso.getAvailList().obtener(0);
        }

        for (int i = 0; i < mod.getRowCount(); i++) {
            String value = (String) (mod.getValueAt(i, 1) == null ? "" : mod.getValueAt(i, 1));
            String nomCampo = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();

            try {
                if (nomCampo.endsWith("int")) {
                    CampoEntero campo = new CampoEntero("");
                    int df = Integer.parseInt(value);
                    campo.setValor(df);

                    if (i == lp) {
                        if (!archivoEnUso.getArbolIndices().insert(campo, RRN)) {
                            JOptionPane.showMessageDialog(jd_nuevoRegistro, "El valor de la llave principal ya existe.",
                                    "Llave principal repetida.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    r.añadirCampo(campo);
                } else if (nomCampo.endsWith("dec")) {
                    CampoDecimal campo = new CampoDecimal("");
                    campo.setValor(Double.parseDouble(value));

                    if (i == lp) {
                        if (!archivoEnUso.getArbolIndices().insert(campo, RRN)) {
                            JOptionPane.showMessageDialog(jd_nuevoRegistro, "El valor de la llave principal ya existe.",
                                    "Llave principal repetida.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    r.añadirCampo(campo);
                } else if (nomCampo.endsWith("car")) {
                    CampoCaracter campo = new CampoCaracter("");
                    campo.setValor(value.charAt(0));

                    if (i == lp) {
                        if (!archivoEnUso.getArbolIndices().insert(campo, RRN)) {
                            JOptionPane.showMessageDialog(jd_nuevoRegistro, "El valor de la llave principal ya existe.",
                                    "Llave principal repetida.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    r.añadirCampo(campo);
                } else {
                    CampoTexto campo = new CampoTexto("");
                    campo.setLongitud(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(i)).getLongitud());
                    System.out.println("Antes del set" + value);
                    campo.setTexto(value);

                    if (i == lp) {
                        if (!archivoEnUso.getArbolIndices().insert(campo, RRN)) {
                            JOptionPane.showMessageDialog(jd_nuevoRegistro, "El valor de la llave principal ya existe.",
                                    "Llave principal repetida.", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    r.añadirCampo(campo);
                }
            } catch (NumberFormatException | IndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(jd_nuevoRegistro, "El valor del campo \""
                        + (String) mod.getValueAt(i, 0) + "\" no es válido.", "Error.", JOptionPane.ERROR_MESSAGE);

                if (i > lp) {
                    if (archivoEnUso.getCamposDelArchivo().get(lp).getNombreCampo().endsWith("int")) {
                        CampoEntero camp = new CampoEntero();
                        int valor = Integer.parseInt((String) (mod.getValueAt(lp, 1)));
                        camp.setValor(valor);
                        archivoEnUso.getArbolIndices().remove(camp);
                    } else if (archivoEnUso.getCamposDelArchivo().get(lp).getNombreCampo().endsWith("dec")) {
                        CampoDecimal camp = new CampoDecimal();
                        double valor = Double.parseDouble((String) (mod.getValueAt(lp, 1)));
                        camp.setValor(valor);
                        archivoEnUso.getArbolIndices().remove(camp);
                    } else if (archivoEnUso.getCamposDelArchivo().get(lp).getNombreCampo().endsWith("car")) {
                        CampoCaracter camp = new CampoCaracter("");
                        String valor = (String) (mod.getValueAt(lp, 1));
                        camp.setValor(valor.charAt(0));
                        archivoEnUso.getArbolIndices().remove(camp);
                    } else {
                        CampoTexto camp = new CampoTexto();
                        String valor = (String) (mod.getValueAt(lp, 1));
                        camp.setLongitud(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(lp)).getLongitud());
                        camp.setTexto(valor);
                        archivoEnUso.getArbolIndices().remove(camp);
                    }
                    return;
                }
                archivoIndices = archivoEnUso.updateTree(archivoIndices);
                return;
            }
        }
//        agregarRegistroEnXML(r);
        archivoIndices = archivoEnUso.updateTree(archivoIndices);
        escribirRegistro(r, RRN);
        JOptionPane.showMessageDialog(jd_nuevoRegistro, "Registro insertado con éxito.",
                "EXITO", JOptionPane.INFORMATION_MESSAGE);
//        jd_nuevoRegistro.setVisible(false); 

        Object[] columIden = {
            "Campos",
            "Valores"
        };

        Object[][] dataVector = new Object[archivoEnUso.getCamposDelArchivo().size()][2];
        for (int i = 0; i < dataVector.length; i++) {
            dataVector[i][0] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25).strip();
            dataVector[i][1] = "";

        }

        // Añadimos los datos a la tabla
        mod.setDataVector(dataVector, columIden);

        clearDisplay(false);

        System.out.println(archivoEnUso.getArbolIndices().toString());

    }//GEN-LAST:event_jb_crearRegistroActionPerformed

    private void introRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introRegistrosActionPerformed

        if (!verifyOpen()) {
            return;
        }

        saveFileActionPerformed(evt);

        if (archivoEnUso.getLlavePrincipal() == -1) {
            JOptionPane.showMessageDialog(this, "No se puede insertar registros mientras no "
                    + "se haya seleccionado una llave principal.", "No hay llave principal.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel mod = (DefaultTableModel) jt_campos.getModel();

        Object[] columIden = {
            "Campos",
            "Valores"
        };

        Object[][] dataVector = new Object[archivoEnUso.getCamposDelArchivo().size()][2];
        for (int i = 0; i < dataVector.length; i++) {
            dataVector[i][0] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25).strip();
            dataVector[i][1] = "";

        }

        // Añadimos los datos a la tabla
        mod.setDataVector(dataVector, columIden);

        jt_campos.setModel(mod);

        jd_nuevoRegistro.pack();
        jd_nuevoRegistro.setModal(true);
        jd_nuevoRegistro.setLocationRelativeTo(this);
        jd_nuevoRegistro.setVisible(true);
    }//GEN-LAST:event_introRegistrosActionPerformed

    private void searchRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRegistrosActionPerformed

        if (!verifyOpen()) {
            return;
        }

        saveFileActionPerformed(evt);

        if (archivoEnUso.getLlavePrincipal() == -1) {
            JOptionPane.showMessageDialog(this, "No se pueden buscar registros mientras no "
                    + "se haya seleccionado una llave principal.", "No hay llave principal.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (archivoEnUso.getNoRegistros() == 0) {
            JOptionPane.showMessageDialog(this, "No se han insertado registros en el archivo.",
                    "No hay registros.", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        DefaultTableModel mod = (DefaultTableModel) jt_busqueda.getModel();

        Object[] columIden = {
            "Campos",
            "Valores"
        };

        Object[][] dataVector = new Object[archivoEnUso.getCamposDelArchivo().size()][2];
        for (int i = 0; i < dataVector.length; i++) {
            dataVector[i][0] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25).strip();
            dataVector[i][1] = "";

        }

        // Añadimos los datos a la tabla
        mod.setDataVector(dataVector, columIden);

        jt_busqueda.setModel(mod);

        jb_eliminarRegistro.setEnabled(false);
        jb_modificarRegistro.setEnabled(false);

        jd_buscarRegistro.pack();
        jd_buscarRegistro.setModal(true);
        jd_buscarRegistro.setLocationRelativeTo(this);
        jd_buscarRegistro.setVisible(true);
    }//GEN-LAST:event_searchRegistrosActionPerformed

    private void jb_buscarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_buscarRegistroActionPerformed

        try {

            String valueToSearch = jtf_buscar.getText();

            if (valueToSearch == null || valueToSearch.isEmpty()) {
                return;
            }

            int lp = archivoEnUso.getLlavePrincipal();
            BTree<Campo, Integer> tree = archivoEnUso.getArbolIndices();
            String nombreCampo = archivoEnUso.getCamposDelArchivo().get(lp).getNombreCampo();

            Pair<BTree.Node<Campo, Integer>, Integer> pair;
            int tipo = 0;

            if (nombreCampo.endsWith("int")) {
                Integer val = Integer.parseInt(valueToSearch);
                CampoEntero campo = new CampoEntero();
                campo.setValor(val);
                pair = tree.search(campo);
                tipo = 1;
            } else if (nombreCampo.endsWith("dec")) {
                Double val = Double.parseDouble(valueToSearch);
                CampoDecimal campo = new CampoDecimal();
                campo.setValor(val);
                pair = tree.search(campo);
                tipo = 2;
            } else if (nombreCampo.endsWith("car")) {
                Character val = valueToSearch.charAt(0);
                CampoCaracter campo = new CampoCaracter(val);
                pair = tree.search(campo);
                tipo = 3;
            } else {
                CampoTexto campo = new CampoTexto();
                campo.setLongitud(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(lp)).getLongitud());
                campo.setTexto(valueToSearch);
                pair = tree.search(campo);
                tipo = 4;
            }

            if (pair == null) {
                JOptionPane.showMessageDialog(jd_buscarRegistro, "No existe un registro con la llave especificada.",
                        "Búsqueda fallida.", JOptionPane.ERROR_MESSAGE);
                return;
            }

            BTree.Node<Campo, Integer> nodo = pair.getPrimero();
            int indice = pair.getSegundo();

            BTree.Entry<Campo, Integer> entry = nodo.getEntry(indice);
            int RRN = entry.getValue();

            cargarRegistro(RRN);

            jb_eliminarRegistro.setEnabled(true);

        } catch (NumberFormatException | IndexOutOfBoundsException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jb_buscarRegistroActionPerformed

    private void jb_clearCargadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_clearCargadoActionPerformed
        DefaultTableModel mod = (DefaultTableModel) jt_busqueda.getModel();

        Object[] columIden = {
            "Campos",
            "Valores"
        };

        Object[][] dataVector = new Object[archivoEnUso.getCamposDelArchivo().size()][2];
        for (int i = 0; i < dataVector.length; i++) {
            dataVector[i][0] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25).strip();
            dataVector[i][1] = "";

        }

        // Añadimos los datos a la tabla
        mod.setDataVector(dataVector, columIden);

        jt_busqueda.setModel(mod);

        jb_eliminarRegistro.setEnabled(false);
        jb_modificarRegistro.setEnabled(false);
        jtf_buscar.setText("");

        registroCargado = null;
        RRNCargado = -1;

    }//GEN-LAST:event_jb_clearCargadoActionPerformed

    private void jb_modificarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_modificarRegistroActionPerformed

        int row = jt_busqueda.getSelectedRow();

        if (row == -1) {
            return;
        }

        String valor = (String) jt_busqueda.getModel().getValueAt(row, 1);

        jtf_actual.setText(valor);
        jtf_nuevo.setText("");

        jd_modificarRegistro.pack();
        jd_modificarRegistro.setModal(true);
        jd_modificarRegistro.setLocationRelativeTo(jd_buscarRegistro);
        jd_modificarRegistro.setVisible(true);

    }//GEN-LAST:event_jb_modificarRegistroActionPerformed

    private void jb_eliminarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_eliminarRegistroActionPerformed
        if (RRNCargado == -1 || registroCargado == null) {
            System.out.println("Error.fdsa");
            return;
        }

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {

            //Cambios en el archivo
            raf.seek(0);
            int cabeza = raf.readInt();

            System.out.println("RRN Cargado: " + RRNCargado);

            raf.seek(archivoEnUso.tamanioMetadata() + (RRNCargado * archivoEnUso.longitudRegistro()));
            raf.writeChar('*');

            raf.writeInt(cabeza);

            raf.seek(0);
            raf.writeInt(RRNCargado);

            //Decrementar el número de registros
            int numReg = raf.readInt();
            raf.seek(4);
            numReg--;
            raf.writeInt(numReg);

            if (numReg == 0) {
                jButton_agregar.setEnabled(true);
                jButton_modificar.setEnabled(true);
                jButton_eliminar.setEnabled(true);
                jButton_hacerPrincipal.setEnabled(true);
            }

            //Decrementar en el archivo de registros
            archivoEnUso.setNoRegistros(archivoEnUso.getNoRegistros() - 1);

            System.out.println("Cantidad registros: " + archivoEnUso.getNoRegistros());

            //Insertar en el AvailList
            archivoEnUso.getAvailList().insertarAlFrente(RRNCargado);

            //Eliminar del arbol
            Campo campo = registroCargado.getCampos().get(archivoEnUso.getLlavePrincipal());
            if (archivoEnUso.getArbolIndices().remove(campo)) {
                JOptionPane.showMessageDialog(jd_buscarRegistro, "El registro ha sido eliminado con éxito.",
                        "Registro eliminado", JOptionPane.INFORMATION_MESSAGE);
                archivoEnUso.updateTree(archivoIndices);
                jb_clearCargadoActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(jd_buscarRegistro, "Ocurrió un error al eliminar el registro del árbol.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

            clearDisplay(false);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(jd_buscarRegistro, "Ocurrió un error al eliminar el registro.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        System.out.println(archivoEnUso.getArbolIndices().toString());

    }//GEN-LAST:event_jb_eliminarRegistroActionPerformed

    private void jt_busquedaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jt_busquedaFocusGained
        int selec = jt_busqueda.getSelectedRow();

        if (selec == -1) {
            return;
        }

        jb_modificarRegistro.setEnabled(true);
    }//GEN-LAST:event_jt_busquedaFocusGained

    private void jt_busquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_busquedaMouseClicked
        int x = evt.getX();
        int y = evt.getY();

//        jt_busqueda.
        DefaultTableModel m = (DefaultTableModel) jt_busqueda.getModel();


    }//GEN-LAST:event_jt_busquedaMouseClicked

    private void jb_modificarRegistroAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_modificarRegistroAceptarActionPerformed

        int row = jt_busqueda.getSelectedRow();

        String actual = jtf_actual.getText().strip();
        String nuevoValor = jtf_nuevo.getText().strip();

        if (actual.equals(nuevoValor) || nuevoValor.isEmpty()) {
            return;
        }

        Campo old = registroCargado.getCampos().get(row);
        Campo c;
        String nomCampo = archivoEnUso.getCamposDelArchivo().get(row).getNombreCampo();

        try {
            if (nomCampo.endsWith("int")) {
                c = new CampoEntero();
                ((CampoEntero) c).setValor(Integer.parseInt(nuevoValor));
            } else if (nomCampo.endsWith("dec")) {
                c = new CampoDecimal();
                ((CampoDecimal) c).setValor(Double.parseDouble(nuevoValor));
            } else if (nomCampo.endsWith("car")) {
                c = new CampoCaracter(nuevoValor.charAt(0));
            } else {
                c = new CampoTexto();
                ((CampoTexto) c).setLongitud(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(row)).getLongitud());
                ((CampoTexto) c).setTexto(nuevoValor);
            }

            System.out.println("Antes de modificar:");
            System.out.println(archivoEnUso.getArbolIndices().toString());
            if (row == archivoEnUso.getLlavePrincipal()) {
                if (!archivoEnUso.getArbolIndices().insert(c, RRNCargado)) {

                    JOptionPane.showMessageDialog(jd_modificarRegistro, "Ya existe un registro con esta llave principal.",
                            "Error.", JOptionPane.ERROR_MESSAGE);

                    return;
                } else {
                    if (archivoEnUso.getArbolIndices().remove(old)) {
                        System.out.println("Removido la llave principal del arbol.");
                        System.out.println(archivoEnUso.getArbolIndices().toString());
                    }
                    archivoEnUso.updateTree(archivoIndices);
                }
            }

            registroCargado.getCampos().set(row, c);

            escribirRegistro(registroCargado, RRNCargado);

            JOptionPane.showMessageDialog(jd_modificarRegistro, "Registro modificado con éxito.",
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);

            jt_busqueda.setValueAt(registroCargado.getCampos().get(row),
                    row, 1);

            jd_modificarRegistro.setVisible(false);

            int target = currentRegList - (((currentRegList - 1) % 20) + 1);

            try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

                int largo = archivoEnUso.longitudRegistro();

                while (currentRegList > target) {

                    currentPosList -= largo;
                    raf.seek(currentPosList);

                    if (raf.readChar() != '*') {
                        currentRegList--;
                    }
                }

                listAfter();

            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (NumberFormatException | IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(jd_modificarRegistro, "El nuevo valor no es válido.",
                    "Error.", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jb_modificarRegistroAceptarActionPerformed

    private void jb_modificarCampoAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_modificarCampoAceptarActionPerformed
        try {

            int seleccion = jList_campos.getSelectedIndex();

            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

            String viejo = jtf_actualCampo.getText();
            String nuevoNombre = jtf_nuevoCampo.getText();

            if (nuevoNombre == null || nuevoNombre.equals(viejo)) {
                return;
            }

            nuevoNombre = nuevoNombre.strip();

            if (nuevoNombre.equals("")) {
                return;
            } else if (nuevoNombre.length() > 25) {
                JOptionPane.showMessageDialog(jd_modificarCampo, "El nuevo nombre del campo no debe "
                        + "sobrepasar los 25 caracteres.", "Nombre demasiado largo.", JOptionPane.ERROR_MESSAGE);
                return;
            }

            nuevoNombre = nuevoNombre.toUpperCase();

//                int opc = JOptionPane.showConfirmDialog(this, "¿Desea hacer este campo su llave principal?");
//                if (opc == JOptionPane.YES_OPTION) {
//                    jLabelPrincipal.setText("Llave principal: " + modificacion);
//                    for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
//                        if (modificacion.equalsIgnoreCase(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo())) {
//                            archivoEnUso.setLlavePrincipal(i);
//                            saved = false;
//                            break;
//                        }
//                    }
//                }
            int largo = nuevoNombre.length();
            while (nuevoNombre.length() < 25) {
                nuevoNombre += " ";
            }

            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                if (nuevoNombre.equalsIgnoreCase(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25))) {
                    JOptionPane.showMessageDialog(listCamposPantalla, "El campo ingresado ya existe.", "No se"
                            + " puede modificar el campo", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            //Cambiamos el campo en la JList
            mod.setElementAt(nuevoNombre, seleccion);
            jList_campos.setModel(mod);

            //Obtenemos el campo del ArchivoDeRegistro
            Campo campo = archivoEnUso.getCamposDelArchivo().get(seleccion);
            String nombreViejo = campo.getNombreCampo();

            if (nombreViejo.endsWith("int")) {
                nuevoNombre += "_int";
            } else if (nombreViejo.endsWith("dec")) {
                nuevoNombre += "_dec";
            } else if (nombreViejo.endsWith("car")) {
                nuevoNombre += "_car";
            } else {
                nuevoNombre += "_str";
            }

            //Cambiamos el campo en el ArchivoDeRegistro
            campo.setNombreCampo(nuevoNombre);

            JOptionPane.showMessageDialog(listCamposPantalla, "Campo modificado con exito",
                    "REALIZADO", JOptionPane.INFORMATION_MESSAGE);

            // Modificamos el campo en la tabla.
            DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
            String dataAux[] = new String[archivoEnUso.getCamposDelArchivo().size()];
            for (int i = 0; i < dataAux.length; i++) {
                if (i == seleccion) {
                    dataAux[i] = nuevoNombre.substring(0, largo);
                } else {
                    dataAux[i] = model.getColumnName(i);
                }
            }
            saved = false;

            jd_modificarCampo.setVisible(false);

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_modificarCampoAceptarActionPerformed

    private void exportXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportXMLActionPerformed
        exportarXML();
        JOptionPane.showMessageDialog(jd_nuevoRegistro, "Archivo exportado correctamente.",
                "EXITO", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_exportXMLActionPerformed

    private void listRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRegistrosActionPerformed
        if (!verifyOpen()) {
            return;
        }

        if (archivoEnUso.getNoRegistros() == 0) {
            return;
        }

        if (archivoEnUso.getNoRegistros() > 20) {
            jb_siguiente.setEnabled(true);
            jb_final.setEnabled(true);
        }

        currentPosList = archivoEnUso.tamanioMetadata();
        currentRegList = 0;

        jpb_porcentaje.setMaximum(archivoEnUso.getNoRegistros());

        listAfter();

    }//GEN-LAST:event_listRegistrosActionPerformed

    private void jb_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_siguienteActionPerformed
        if (archivoEnUso.getNoRegistros() - 20 <= currentRegList) {
            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);
        }

        jb_anterior.setEnabled(true);
        jb_inicio.setEnabled(true);

        listAfter();

    }//GEN-LAST:event_jb_siguienteActionPerformed

    private void jb_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_anteriorActionPerformed

        if (currentRegList <= 40) {
            jb_anterior.setEnabled(false);
            jb_inicio.setEnabled(false);
        }

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        int target = currentRegList - (((currentRegList - 1) % 20) + 1) - 20;

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            int largo = archivoEnUso.longitudRegistro();

            while (currentRegList > target) {

                currentPosList -= largo;
                raf.seek(currentPosList);

                if (raf.readChar() != '*') {
                    currentRegList--;
                }
            }

            listAfter();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jb_anteriorActionPerformed

    private void jb_inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_inicioActionPerformed

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        currentPosList = archivoEnUso.tamanioMetadata();
        currentRegList = 0;

        listAfter();
    }//GEN-LAST:event_jb_inicioActionPerformed

    private void jb_finalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_finalActionPerformed
        int target = archivoEnUso.getNoRegistros() - (archivoEnUso.getNoRegistros() % 20);

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);

            while (currentRegList < target) {
                if (raf.readChar() != '*') {
                    currentRegList++;
                }
                currentPosList += largo;
                raf.seek(currentPosList);
            }

            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);

            jb_anterior.setEnabled(true);
            jb_inicio.setEnabled(true);

            listAfter();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jb_finalActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearDisplay(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void exportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcelActionPerformed
        if (!verifyOpen()) {
            return;
        }

        ExcelFactory ef = new ExcelFactory(archivoCargado, archivoEnUso, this);
        ef.exportExcel();

    }//GEN-LAST:event_exportExcelActionPerformed

    private void jButton_hacerPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hacerPrincipalActionPerformed
        int selection = jList_campos.getSelectedIndex();

        // No hay nada seleccionado
        if (selection == -1) {
            JOptionPane.showMessageDialog(listCamposPantalla, "Debe seleccionar un campo.");
            return;
        }

        archivoEnUso.setLlavePrincipal(selection);
        jLabelPrincipal.setText("Llave principal: " + jList_campos.getModel().getElementAt(selection));

        saved = false;

    }//GEN-LAST:event_jButton_hacerPrincipalActionPerformed

    private void jButton_hacerSecundariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hacerSecundariaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_hacerSecundariaActionPerformed

    public void listAfter() {
        DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

        String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            byte[] types = new byte[data[0].length];

            for (int i = 0; i < types.length; i++) {
                String nom = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                if (nom.endsWith("int")) {
                    types[i] = 1;
                } else if (nom.endsWith("dec")) {
                    types[i] = 2;
                } else if (nom.endsWith("car")) {
                    types[i] = 3;
                } else if (nom.endsWith("str")) {
                    types[i] = 4;
                } else {
                    System.out.println("ERRORRRR");
                }
            }

            System.out.println(Arrays.toString(types));

            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);

            int row = 0;
            System.out.println("Registros: " + archivoEnUso.getNoRegistros());
            for (; currentRegList < archivoEnUso.getNoRegistros() && row < 20; currentRegList++) {

                System.out.println("Iteración:");
                System.out.println(currentPosList);
                System.out.println(currentRegList);

                char mark = raf.readChar();
                if (mark == '*') {
                    currentRegList--;
                    currentPosList += largo;
                    raf.seek(currentPosList);
                    continue;
                }

                for (int j = 0; j < data[0].length; j++) {
                    System.out.println("Posicion actual" + raf.getFilePointer());
                    switch (types[j]) {
                        case 1: {
                            String val = String.valueOf(raf.readInt());
                            data[row][j] = val;
                            break;
                        }
                        case 2: {
                            String val = String.valueOf(raf.readDouble());
                            data[row][j] = val;
                            break;
                        }
                        case 3: {
                            String val = String.valueOf(raf.readChar());
                            data[row][j] = val;
                            break;
                        }
                        case 4: {
                            String val = raf.readUTF();
                            data[row][j] = val;
                            break;
                        }
                        default: {
                            System.out.println("Errorazo");
                        }
                    }
                }
                currentPosList += largo;
                row++;
                raf.readChar();
            }

        } catch (EOFException eof) {
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        String[] columns = new String[data[0].length];
        for (int i = 0; i < columns.length; i++) {
            columns[i] = m.getColumnName(i);
        }

        m.setDataVector(data, columns);
        jpb_porcentaje.setValue(currentRegList);
    }

    public void listBefore() {
        DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

        String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            byte[] types = new byte[data[0].length];

            for (int i = 0; i < types.length; i++) {
                String nom = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                if (nom.endsWith("int")) {
                    types[i] = 1;
                } else if (nom.endsWith("dec")) {
                    types[i] = 2;
                } else if (nom.endsWith("car")) {
                    types[i] = 3;
                } else if (nom.endsWith("str")) {
                    types[i] = 4;
                } else {
                    System.out.println("ERRORRRR");
                }
            }

            int largo = archivoEnUso.longitudRegistro();

            int row = 19;
            System.out.println("Registros: " + archivoEnUso.getNoRegistros());
            for (; row > 0; currentRegList--) {

                currentPosList -= largo;
                raf.seek(currentPosList);

                System.out.println("Iteración atrás:");
                System.out.println(currentPosList);
                System.out.println(currentRegList);

                char mark = raf.readChar();
                if (mark == '*') {
                    currentRegList++;
                    currentPosList -= largo;
                    raf.seek(currentPosList);
                    continue;
                }

                for (int j = 0; j < data[0].length; j++) {
                    System.out.println("Posicion actual" + raf.getFilePointer());
                    switch (types[j]) {
                        case 1: {
                            String val = String.valueOf(raf.readInt());
                            data[row][j] = val;
                            break;
                        }
                        case 2: {
                            String val = String.valueOf(raf.readDouble());
                            data[row][j] = val;
                            break;
                        }
                        case 3: {
                            String val = String.valueOf(raf.readChar());
                            data[row][j] = val;
                            break;
                        }
                        case 4: {
                            String val = raf.readUTF();
                            data[row][j] = val;
                            break;
                        }
                        default: {
                            System.out.println("Errorazo");
                        }
                    }
                }
                row--;
            }

        } catch (EOFException eof) {
            eof.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        String[] columns = new String[data[0].length];
        for (int i = 0; i < columns.length; i++) {
            columns[i] = m.getColumnName(i);
        }

        m.setDataVector(data, columns);
        jpb_porcentaje.setValue(currentRegList);
    }

    public void clearDisplay(boolean newTableModel) {
        //Reset progressbar
        jpb_porcentaje.setValue(0);

        //Reset table
        if (newTableModel) {
            jTable_Display.setModel(new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
        } else {
            String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

            String[] columns = new String[data[0].length];
            for (int i = 0; i < columns.length; i++) {
                columns[i] = m.getColumnName(i);
            }

            m.setDataVector(data, columns);
        }

        //Reset navigation buttons
        jb_siguiente.setEnabled(false);
        jb_final.setEnabled(false);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        //Reset helper variables
        currentPosList = -1;
        currentRegList = -1;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AgregarRegistro;
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenu Campos;
    private javax.swing.JButton CrearCampo;
    private javax.swing.JMenuItem EliminarRegistros;
    private javax.swing.JMenu Estandarizacion;
    private javax.swing.JMenuItem Exit;
    private javax.swing.ButtonGroup GrupoTipoDeDato;
    private javax.swing.JMenu Indices;
    private javax.swing.ButtonGroup LlavePrincipal_Secundaria;
    private javax.swing.JMenuBar MenuPrincipal;
    private javax.swing.JMenu Registros;
    private javax.swing.JMenuItem SalvarCambiosTemporalmente;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem closeFile;
    private javax.swing.JMenuItem exportExcel;
    private javax.swing.JMenuItem exportXML;
    private javax.swing.JMenuItem introRegistros;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_agregar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_hacerPrincipal;
    private javax.swing.JButton jButton_hacerSecundaria;
    private javax.swing.JButton jButton_modificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelPrincipal;
    private javax.swing.JLabel jLabel_BG;
    private javax.swing.JLabel jLabel_BG_campos;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JLabel jLabel_Title_Campos;
    private javax.swing.JLabel jLabel_current;
    private javax.swing.JList<String> jList_campos;
    private javax.swing.JMenuItem jMenuItem_listarCampos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel_BackGround;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable_Display;
    private javax.swing.JButton jb_anterior;
    private javax.swing.JButton jb_buscarRegistro;
    private javax.swing.JButton jb_clearCargado;
    private javax.swing.JButton jb_crearRegistro;
    private javax.swing.JButton jb_eliminarRegistro;
    private javax.swing.JButton jb_final;
    private javax.swing.JButton jb_inicio;
    private javax.swing.JButton jb_modificarCampoAceptar;
    private javax.swing.JButton jb_modificarRegistro;
    private javax.swing.JButton jb_modificarRegistroAceptar;
    private javax.swing.JButton jb_siguiente;
    private javax.swing.JDialog jd_buscarRegistro;
    private javax.swing.JDialog jd_modificarCampo;
    private javax.swing.JDialog jd_modificarRegistro;
    private javax.swing.JDialog jd_nuevoRegistro;
    private javax.swing.JLabel jl_mod_BG;
    private javax.swing.JLabel jl_mod_BG1;
    private javax.swing.JProgressBar jpb_porcentaje;
    private javax.swing.JSpinner js_tamanioCadena;
    private javax.swing.JTable jt_busqueda;
    private javax.swing.JTable jt_campos;
    private javax.swing.JTextField jtf_actual;
    private javax.swing.JTextField jtf_actualCampo;
    private javax.swing.JTextField jtf_buscar;
    private javax.swing.JTextField jtf_nuevo;
    private javax.swing.JTextField jtf_nuevoCampo;
    private javax.swing.JLabel labelFondo;
    private javax.swing.JDialog listCamposPantalla;
    private javax.swing.JMenuItem listRegistros;
    private javax.swing.JPopupMenu menuRegistros;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem newIndex;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JDialog pantallaCrearCampos;
    private javax.swing.JRadioButton rb_LlavePrincipal;
    private javax.swing.JRadioButton rb_LlaveSecundaria;
    private javax.swing.JRadioButton rb_campoNormal;
    private javax.swing.JMenuItem reindexFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenuItem searchRegistros;
    private javax.swing.JTextField tf_NombreCampo;
    private javax.swing.JRadioButton tipoChar;
    private javax.swing.JRadioButton tipoDecimal;
    private javax.swing.JRadioButton tipoEntero;
    private javax.swing.JRadioButton tipoString;
    // End of variables declaration//GEN-END:variables

    private void cargarRegistro(int RRN) {

        if (RRN > archivoEnUso.getNoRegistros() - 1) {
            JOptionPane.showMessageDialog(this, "Error cargar registro");
            return;
        }

        int offsetInicial = archivoEnUso.tamanioMetadata();
        int longitudRegistro = archivoEnUso.longitudRegistro();

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {
            raf.seek(offsetInicial + (RRN * longitudRegistro));

            Registro r = new Registro(archivoEnUso.getCamposDelArchivo().size());

            raf.readChar();

            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                String nomCampo = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();

                if (nomCampo.endsWith("_int")) {
                    int val = raf.readInt();
                    CampoEntero campo = new CampoEntero();
                    campo.setValor(val);
                    r.añadirCampo(campo);
                } else if (nomCampo.endsWith("_dec")) {
                    double val = raf.readDouble();
                    CampoDecimal campo = new CampoDecimal();
                    campo.setValor(val);
                    r.añadirCampo(campo);
                } else if (nomCampo.endsWith("_str")) {
                    String val = raf.readUTF();
                    CampoTexto campo = new CampoTexto();
                    campo.setLongitud(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(i)).getLongitud());
                    campo.setTexto(val);
                    r.añadirCampo(campo);
                } else {
                    char val = raf.readChar();
                    CampoCaracter campo = new CampoCaracter(val);
                    r.añadirCampo(campo);
                }

            }

            registroCargado = r;
            RRNCargado = RRN;

            mostrarRegistro(r);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mostrarRegistro(Registro r) {

        DefaultTableModel mod = (DefaultTableModel) jt_busqueda.getModel();

        for (int i = 0; i < r.getCampos().size(); i++) {

            Campo c = r.getCampos().get(i);
            String nomCampo = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
            String value;

            if (nomCampo.endsWith("_int")) {
                int v = ((CampoEntero) c).getValor();
                value = String.valueOf(v);
            } else if (nomCampo.endsWith("_dec")) {
                double v = ((CampoDecimal) c).getValor();
                value = String.valueOf(v);
            } else if (nomCampo.endsWith("_car")) {
                char v = ((CampoCaracter) c).getValor();
                value = String.valueOf(v);
            } else {
                value = ((CampoTexto) c).getTexto();
            }

            mod.setValueAt(value, i, 1);

        }

    }

    private void escribirRegistro(Registro r, int RRN) {

        int offsetInicial = archivoEnUso.tamanioMetadata();
        int longitudRegistro = archivoEnUso.longitudRegistro();
//        int numRegistros = archivoEnUso.getNoRegistros();

        System.out.println("\n" + offsetInicial);
        System.out.println(longitudRegistro);
//        System.out.println(numRegistros);
//        System.out.println(offsetInicial + (numRegistros * longitudRegistro));

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {

            raf.seek(offsetInicial + (RRN * longitudRegistro));
            raf.writeChar('-');

            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                Campo c = r.getCampos().get(i);

                if (c instanceof CampoEntero) {
                    CampoEntero campo = (CampoEntero) c;
                    raf.writeInt(campo.getValor());
                } else if (c instanceof CampoDecimal) {
                    CampoDecimal campo = (CampoDecimal) c;
                    raf.writeDouble(campo.getValor());
                } else if (c instanceof CampoCaracter) {
                    CampoCaracter campo = (CampoCaracter) c;
                    raf.writeChar(campo.getValor());
                } else {
                    CampoTexto campo = (CampoTexto) c;
                    raf.writeUTF(campo.getTexto());
                }

            }

            raf.writeChar('\n');

            if (archivoEnUso.getNoRegistros() != 0) {
                jButton_agregar.setEnabled(false);
                jButton_modificar.setEnabled(false);
                jButton_eliminar.setEnabled(false);
                jButton_hacerPrincipal.setEnabled(false);
            }

            archivoEnUso.getAvailList().suprimir(0);
            int cabeza = archivoEnUso.getAvailList() == null || archivoEnUso.getAvailList().vacia() ? -1 : archivoEnUso.getAvailList().obtener(0);

            //Cambiamos la cabeza del availist
            raf.seek(0);
            raf.writeInt(cabeza);

            //Incrementamos la cantidad de registros en el archivo
            int numReg = raf.readInt();
            raf.seek(4);
            raf.writeInt(numReg + 1);

            //Incrementamos la cantidad de registros en el archivoEnUso
            archivoEnUso.setNoRegistros(archivoEnUso.getNoRegistros() + 1);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void InsertMetadataInNewFile(File archivo) {

//        try {
//            boolean one = archivo.exists();
//            boolean two = archivo.delete();
//            boolean three = archivo.createNewFile();
//            
//            System.out.println(one);
//            System.out.println(two);
//            System.out.println(three);
//            
//            if (one && (!two || three)) {
//                
//                JOptionPane.showMessageDialog(this, "Error insert metadata");
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        String pathName = archivo.getPath();
        try {
            new FileWriter(archivo, false).close();
        } catch (IOException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( RandomAccessFile raf = new RandomAccessFile(archivo, "rw")) {

//            if (nuevo) {
//            }else{
//                archivoEnUso.getRRN();
//            }
            raf.writeInt(-1);//no es RRN, es cabeza del availist 
            raf.writeInt(0);//#registros    
            Date date = Calendar.getInstance().getTime();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            String strDateCreated = dateFormat.format(date);
            raf.writeUTF(strDateCreated);//fecha de creacion
            if (nuevo) {
                raf.writeInt(-1);//llave principal -1 por defecto solo para archivos nuevos
                raf.writeInt(0);//archivos nuevos no tienen llaves secundarias
                raf.writeInt(0);//archivos nuevos no tiene campos
            } else {
                raf.writeInt(archivoEnUso.getLlavePrincipal());
                int cantidadLlavesSecundarias = archivoEnUso.getSecundarias().size();
                raf.writeInt(cantidadLlavesSecundarias);
                for (int i = 0; i < archivoEnUso.getSecundarias().size(); i++) {
                    raf.writeInt(archivoEnUso.getSecundarias().get(i));
                }
                int cantidadCampos = archivoEnUso.getCamposDelArchivo().size();
                raf.writeInt(cantidadCampos);
                for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                    String auxiliarNoSeCuantas = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                    raf.writeUTF(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                    if (auxiliarNoSeCuantas.endsWith("_str")) {
                        raf.writeInt(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(i)).getLongitud());
                    }
                }
                raf.writeChar('\n');
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean verifyOpen() {
        if (archivoCargado == null) {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo para "
                    + "realizar esa operación.", "No hay un archivo abierto",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void loadFile(File file, File fileIndices) {
        if (file == null) {
            return;
        }
        archivoCargado = file;
        archivoIndices = fileIndices;
        archivoEnUso = new ArchivoDeRegitstro(archivoCargado, archivoIndices);

        jLabel_current.setText("Current file: " + archivoCargado.getName());
        jTable_Display.setModel(new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        DefaultListModel list_model = new DefaultListModel();
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {
//            String[] dataColumn = new String[archivoEnUso.getCamposDelArchivo().size()];
            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {//Para cargar los registros en memoria una vez se abre el archivo
                String aux = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                aux = aux.substring(0, 25).strip();

                list_model.addElement(aux);

                String valoresColumna[] = new String[20];

                model.addColumn(aux, valoresColumna);
            }

            if (archivoEnUso.getLlavePrincipal() == -1) {
                jLabelPrincipal.setText("Llave Principal: No se ha seleccionado una llave principal");
            } else {
                String llavePrincipal = archivoEnUso.getCamposDelArchivo().get(archivoEnUso.getLlavePrincipal()).getNombreCampo().substring(0, 25).strip();
                jLabelPrincipal.setText("Llave Principal: " + llavePrincipal);
            }

//            model.setColumnIdentifiers(dataColumn);
//            for (int i = 0; i < valoresColumna.length; i++) {
//                valoresColumna[i] = "";
//            }
            //Replace the jList model
            jList_campos.setModel(list_model);
            System.out.println(raf.readInt());
            System.out.println(raf.readInt());
            System.out.println(raf.readUTF());
            System.out.println(raf.readInt());
            int auxSec = raf.readInt();
            System.out.println("cantidad secundarias->" + auxSec);
            for (int i = 0; i < auxSec; i++) {
                System.out.print(raf.readInt() + "--");
            }
            int auxCampos = raf.readInt();
            System.out.println("Cantidad campos->" + auxCampos);
            for (int i = 0; i < auxCampos; i++) {
                System.out.print(raf.readUTF() + "--");
            }
            //System.out.println(archivoEnUso.getCamposDelArchivo().size());
            if (archivoEnUso.getLlavePrincipal() != -1) {
                tieneLlavePrincipal = true;
            }

            if (archivoEnUso.getNoRegistros() == 0) {
                jButton_agregar.setEnabled(true);
                jButton_modificar.setEnabled(true);
                jButton_eliminar.setEnabled(true);
                jButton_hacerPrincipal.setEnabled(true);
                jButton_hacerSecundaria.setEnabled(true);
            } else {
                jButton_agregar.setEnabled(false);
                jButton_modificar.setEnabled(false);
                jButton_eliminar.setEnabled(false);
                jButton_hacerPrincipal.setEnabled(false);
                jButton_hacerSecundaria.setEnabled(false);
            }

        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }

    public void CrearXML(File archivo) {
        try {
            docFactory = DocumentBuilderFactory.newInstance();
            docBuilder = docFactory.newDocumentBuilder();
            //Elemento raíz
            doc = docBuilder.newDocument();
            rootElement = doc.createElement(archivo.getName());
            doc.appendChild(rootElement);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void agregarRegistroEnXML(Registro r) {
        Element registro = doc.createElement("resgitro");
        rootElement.appendChild(registro);
        for (int i = 0; i < r.getCampos().size(); i++) {
            Campo c = r.getCampos().get(i);
            String nomCampo = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
            String value;
            String identifier = nomCampo.substring(0, 25);
            identifier = identifier.strip();
            Attr attr = doc.createAttribute(identifier);
            if (nomCampo.endsWith("_int")) {
                int v = ((CampoEntero) c).getValor();
                value = String.valueOf(v);
                attr.setValue(value);
                registro.setAttributeNode(attr);
            } else if (nomCampo.endsWith("_dec")) {
                double v = ((CampoDecimal) c).getValor();
                value = String.valueOf(v);
                attr.setValue(value);
                registro.setAttributeNode(attr);
            } else if (nomCampo.endsWith("_car")) {
                char v = ((CampoCaracter) c).getValor();
                value = String.valueOf(v);
                attr.setValue(value);
                registro.setAttributeNode(attr);
            } else {
                value = ((CampoTexto) c).getTexto();
                attr.setValue(value);
                registro.setAttributeNode(attr);
            }
        }
    }

    public void exportarXML() {
        try {
            transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(path + ".xml"));
            transformer.transform(source, result);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void parsePerson() {
        try ( FileReader fir = new FileReader("C:\\Users\\Tyler C\\Downloads\\PersonFile.csv");  BufferedReader br = new BufferedReader(fir)) {
            br.readLine();
            String line = "";
            int cont = 0;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                Registro r = new Registro(values.length);
                CampoEntero ce = new CampoEntero();
                ce.setValor(Integer.parseInt(values[0]));
                r.añadirCampo(ce);
                archivoEnUso.getArbolIndices().insert(ce, cont);
                
                CampoTexto ct = new CampoTexto();
                ct.setLongitud(20);
                ct.setTexto(values[1]);
                r.añadirCampo(ct);
                
                ce = new CampoEntero();
                ce.setValor(Integer.parseInt(values[2]));
                r.añadirCampo(ce);
                
                ce = new CampoEntero();
                ce.setValor(Integer.parseInt(values[3]));
                r.añadirCampo(ce);
                
                escribirRegistro(r,cont);
                cont++;
            }
            archivoEnUso.updateTree(archivoIndices);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private File archivoCargado;
    private File archivoIndices;
    private boolean saved = true; //Debe incicializarse en true porque por default no hay un archivo abierto. Al crear un archivo se hace false.
    private boolean tieneLlavePrincipal = false;
    private ArchivoDeRegitstro archivoEnUso;
    private boolean nuevo = false;
    private DocumentBuilderFactory docFactory = null;
    private DocumentBuilder docBuilder = null;
    private Document doc = null;
    private Element rootElement = null;
    private TransformerFactory transformerFactory = null;
    private Registro registroCargado;
    private int RRNCargado = -1;
    private String path = "";
    private int currentPosList = -1;
    private int currentRegList = -1;
}
