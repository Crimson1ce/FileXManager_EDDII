/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krista
 */
public class PantallaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listCamposPantalla = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        taCampos = new javax.swing.JTextArea();
        camposLabel = new javax.swing.JLabel();
        jPanel_BackGround = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Display = new javax.swing.JTable();
        jLabel_current = new javax.swing.JLabel();
        jLabel_Title = new javax.swing.JLabel();
        jLabel_BG = new javax.swing.JLabel();
        MenuPrincipal = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        closeFile = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Campos = new javax.swing.JMenu();
        newCampo = new javax.swing.JMenuItem();
        listCampos = new javax.swing.JMenuItem();
        modCampos = new javax.swing.JMenuItem();
        delCampos = new javax.swing.JMenuItem();
        Registros = new javax.swing.JMenu();
        introRegistros = new javax.swing.JMenuItem();
        modRegistros = new javax.swing.JMenuItem();
        searchRegistros = new javax.swing.JMenuItem();
        deleteRegistros = new javax.swing.JMenuItem();
        listRegistros = new javax.swing.JMenuItem();
        Indices = new javax.swing.JMenu();
        newIndex = new javax.swing.JMenuItem();
        reindexFile = new javax.swing.JMenuItem();
        Estandarizacion = new javax.swing.JMenu();
        exportExcel = new javax.swing.JMenuItem();
        exportXML = new javax.swing.JMenuItem();

        taCampos.setColumns(20);
        taCampos.setRows(5);
        jScrollPane1.setViewportView(taCampos);

        camposLabel.setText("Los campos disponibles para registros son los siguientes:");

        javax.swing.GroupLayout listCamposPantallaLayout = new javax.swing.GroupLayout(listCamposPantalla.getContentPane());
        listCamposPantalla.getContentPane().setLayout(listCamposPantallaLayout);
        listCamposPantallaLayout.setHorizontalGroup(
            listCamposPantallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listCamposPantallaLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(camposLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        listCamposPantallaLayout.setVerticalGroup(
            listCamposPantallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listCamposPantallaLayout.createSequentialGroup()
                .addGroup(listCamposPantallaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listCamposPantallaLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(camposLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listCamposPantallaLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon("./src/recursos/x.png").getImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_BackGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_Display.setGridColor(new java.awt.Color(153, 0, 204));
        jTable_Display.setRowSelectionAllowed(false);
        jTable_Display.setShowHorizontalLines(false);
        jScrollPane3.setViewportView(jTable_Display);

        jPanel_BackGround.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 950, 330));

        jLabel_current.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_current.setForeground(new java.awt.Color(255, 150, 119));
        jLabel_current.setText("Current File: ");
        jPanel_BackGround.add(jLabel_current, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 370, -1));

        jLabel_Title.setFont(new java.awt.Font("BankGothic Md BT", 3, 36)); // NOI18N
        jLabel_Title.setForeground(new java.awt.Color(255, 150, 119));
        jLabel_Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Title.setText("File X Manager");
        jLabel_Title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel_BackGround.add(jLabel_Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 370, -1));

        jLabel_BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/Degradado.png"))); // NOI18N
        jPanel_BackGround.add(jLabel_BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 530));

        getContentPane().add(jPanel_BackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Archivo.setText("Archivo");
        Archivo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newFile.setText("Nuevo Archivo");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        Archivo.add(newFile);

        openFile.setText("Abrir Archivo");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        Archivo.add(openFile);

        saveFile.setText("Guardar Archivo");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        Archivo.add(saveFile);

        closeFile.setText("Cerrar Archivo");
        closeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileActionPerformed(evt);
            }
        });
        Archivo.add(closeFile);

        Exit.setText("Salir");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Archivo.add(Exit);

        MenuPrincipal.add(Archivo);

        Campos.setText("Campos");
        Campos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newCampo.setText("Nuevo Campo");
        newCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCampoActionPerformed(evt);
            }
        });
        Campos.add(newCampo);

        listCampos.setText("Listar Campos");
        listCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listCamposActionPerformed(evt);
            }
        });
        Campos.add(listCampos);

        modCampos.setText("Modificar Campos");
        modCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modCamposActionPerformed(evt);
            }
        });
        Campos.add(modCampos);

        delCampos.setText("Eliminar Campos");
        delCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCamposActionPerformed(evt);
            }
        });
        Campos.add(delCampos);

        MenuPrincipal.add(Campos);

        Registros.setText("Registros");
        Registros.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        introRegistros.setText("Introducir Registros");
        Registros.add(introRegistros);

        modRegistros.setText("Modificar Registros");
        Registros.add(modRegistros);

        searchRegistros.setText("Buscar Registros");
        Registros.add(searchRegistros);

        deleteRegistros.setText("Borrar Registros");
        Registros.add(deleteRegistros);

        listRegistros.setText("Listar Registros");
        Registros.add(listRegistros);

        MenuPrincipal.add(Registros);

        Indices.setText("Indices");
        Indices.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newIndex.setText("Crear Indices");
        Indices.add(newIndex);

        reindexFile.setText("Re-indexar Archivos");
        Indices.add(reindexFile);

        MenuPrincipal.add(Indices);

        Estandarizacion.setText("Estandarizacion");
        Estandarizacion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        exportExcel.setText("Exportar en archivo Excel");
        Estandarizacion.add(exportExcel);

        exportXML.setText("Exportar en XML con Schema");
        Estandarizacion.add(exportXML);

        MenuPrincipal.add(Estandarizacion);

        setJMenuBar(MenuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        if (archivoCargado != null) {
            closeFileActionPerformed(evt); //Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
            // porque por default no hay archivo cargado
        }

        JFileChooser jfc = new JFileChooser("./");//instanciar

        //y agregar una extension que filtre
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
        jfc.setFileFilter(filtro);
        int seleccion = jfc.showSaveDialog(this);//muestre la ventana 

        PrintWriter pw = null;

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                File fichero = null; //instancia es null porque hay que ponerlo en una extension
                if (jfc.getFileFilter().getDescription().equals("Archivos de Texto")) { //si el filtro es archivo de texto
                    fichero = new File(jfc.getSelectedFile().getPath() + ".txt");//agarre el archivo y concatene la extension

                } else {
                    int replace = JOptionPane.showConfirmDialog(this, "¿Desea "
                            + "reemplazar el archivo existente?", "Reemplazar archivo.",
                            JOptionPane.YES_NO_OPTION);
                    if (replace != JOptionPane.YES_OPTION) {
                        return;
                    }
                    fichero = jfc.getSelectedFile();//capture el selected file
                }
                pw = new PrintWriter(fichero);//apunta al archivo
                pw.write(InsertMetadata());
                pw.write("");
                pw.flush();//pasar a rom
                JOptionPane.showMessageDialog(this, "Archivo creado exitosamente.");

                archivoCargado = fichero;
                jLabel_current.setText("Current file: " + archivoCargado.getName());
                jTable_Display.setModel(new DefaultTableModel(0, 0));
                saved = false;

                pw.close();

            } catch (HeadlessException | FileNotFoundException e) {
            }
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        try {
            if (archivoCargado != null) {
                closeFileActionPerformed(evt); //Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
                // porque por default no hay archivo cargado
            }
            JFileChooser jfc = new JFileChooser("./"); //donde deseamos que aparezca

            //crear los filtros
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");

            //setear los filtros
            jfc.setFileFilter(filtro);//forma 1: marcado como seleccionado
            jfc.addChoosableFileFilter(filtro2);//forma 2: agregarlo a la lista
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                loadFile(jfc.getSelectedFile());

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        if (!verifyOpen()) {
            return;
        }

        if (saved) {
            return;
        }

        try {
            FileWriter fw = null;
            BufferedWriter bw = null;
            Scanner sc = null;
            sc = new Scanner(archivoCargado);
            String line = sc.nextLine();
            String[] metadata = line.split("\\?");
            String aux = "";
            for (String temp : campos) {
                fw = new FileWriter(archivoCargado, false);
                bw = new BufferedWriter(fw);
                aux += temp + "|";
            }
            metadata[2] = aux;
            String aux2 = Arrays.toString(metadata);
            String str_ = aux2.replaceAll(",", "?");
            String str1_ = str_.replaceAll("\\s+", "");
            String str2_ = str1_.replaceAll("\\[", "");
            String str3_ = str2_.replaceAll("\\]", "");
            bw.write(str3_);
            bw.flush();
            bw.close();
            fw.close();
            JOptionPane.showMessageDialog(this, "El archivo se ha guardado "
                    + "correctamente", "EXITO", JOptionPane.INFORMATION_MESSAGE);
            saved = true;
        } catch (IOException ex) {
            Logger.getLogger(classes.PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void closeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileActionPerformed
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                    + "archivo antes de salir?", "Guardar y cerrar.",
                    JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                saveFileActionPerformed(evt);
            }
            saved = true;
        }
        jLabel_current.setText("Current File:");
        archivoCargado = null;
        jTable_Display.setModel(new DefaultTableModel(0, 0));
        taCampos.setText("");
        campos = new ArrayList<String>();
    }//GEN-LAST:event_closeFileActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                    + "archivo antes de salir?", "Guardar y cerrar.", JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                saveFileActionPerformed(evt);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void newCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCampoActionPerformed
        if (!verifyOpen()) {
            return;
        }

        String campo = JOptionPane.showInputDialog("Ingrese el nuevo campo a "
                + "anexar en los registros:");

        campo = campo.toUpperCase();

        if (campo != "" && !campos.contains(campo)) {
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();
            m.addColumn(campo);
            jTable_Display.setModel(m);
            JOptionPane.showMessageDialog(this, "Campo agregado exitosamente");
            campos.add(campo);
            saved = false;
        } else {
            JOptionPane.showMessageDialog(this, "El campo ya existe.", "No se"
                    + " puede añadir el campo", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newCampoActionPerformed

    private void listCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listCamposActionPerformed
        if (!verifyOpen()) {
            return;
        }
        listCamposPantalla.pack();
        listCamposPantalla.setLocationRelativeTo(this);
        listCamposPantalla.setVisible(true);
        String aux = "";
        for (String campo : campos) {
            aux += campo.substring(0, campo.length());//Correccion, el .lenght()-1 listaba sin la ultima letra de cada campo
            aux += "\n";
        }
        taCampos.setText(aux);
        taCampos.setEditable(false);
    }//GEN-LAST:event_listCamposActionPerformed

    private void modCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modCamposActionPerformed
        String campoModificar = JOptionPane.showInputDialog(this, "Ingrese el "
                + "nombre del campo a modificar");
        String modificacion = JOptionPane.showInputDialog(this, "Ingrese el "
                + " nuevo nombre del campo");
        String modificacion_ = modificacion.toUpperCase();
        boolean flag = false;
        for (int i = 0; i < campos.size(); i++) {
            String temp = campos.get(i);
            if (temp.equals(campoModificar)) {
                campos.set(i, modificacion_);
                flag = true;
                JOptionPane.showMessageDialog(this, "Campo modificado con exito",
                        "REALIZADO", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(this, "El campo ingresado debe ser"
                    + " EXACTAMENTE el mismo nombre que el campo a modificar",
                    "VERIFICAR", JOptionPane.ERROR_MESSAGE);
        }
        String[] campos_ = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            campos_[i] = campos.get(i);
        }
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        model.setColumnIdentifiers(campos_);
    }//GEN-LAST:event_modCamposActionPerformed

    private void delCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCamposActionPerformed
        String campoEliminar = JOptionPane.showInputDialog(this, "Ingrese el "
                + "nombre del campo a eliminar");
        boolean flag = false;
        for (String campo : campos) {
            String aux = campo.substring(0, campo.length());
            if (aux.equals(campoEliminar)) {
                campos.remove(campo);
                JOptionPane.showMessageDialog(this, "Campo eliminado con exito",
                        "REALIZADO", JOptionPane.INFORMATION_MESSAGE);
                flag = true;
                break;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(this, "El campo ingresado debe ser"
                    + " EXACTAMENTE el mismo nombre que el campo a eliminar",
                    "VERIFICAR", JOptionPane.ERROR_MESSAGE);
        }
        String[] campos_ = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            campos_[i] = campos.get(i);
        }
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        model.setColumnIdentifiers(campos_);
    }//GEN-LAST:event_delCamposActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenu Campos;
    private javax.swing.JMenu Estandarizacion;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu Indices;
    private javax.swing.JMenuBar MenuPrincipal;
    private javax.swing.JMenu Registros;
    private javax.swing.JLabel camposLabel;
    private javax.swing.JMenuItem closeFile;
    private javax.swing.JMenuItem delCampos;
    private javax.swing.JMenuItem deleteRegistros;
    private javax.swing.JMenuItem exportExcel;
    private javax.swing.JMenuItem exportXML;
    private javax.swing.JMenuItem introRegistros;
    private javax.swing.JLabel jLabel_BG;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JLabel jLabel_current;
    private javax.swing.JPanel jPanel_BackGround;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Display;
    private javax.swing.JMenuItem listCampos;
    private javax.swing.JDialog listCamposPantalla;
    private javax.swing.JMenuItem listRegistros;
    private javax.swing.JMenuItem modCampos;
    private javax.swing.JMenuItem modRegistros;
    private javax.swing.JMenuItem newCampo;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem newIndex;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem reindexFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenuItem searchRegistros;
    private javax.swing.JTextArea taCampos;
    // End of variables declaration//GEN-END:variables

    public String InsertMetadata() {
        /*
        RRN,Delimeter,#Registros,Campos,Version,Modified by,Last time modified,Date created
         */
        Date date = Calendar.getInstance().getTime();
        DateFormat dateFormat = new SimpleDateFormat("yy-mm-dd hh:mm:ss");
        String strDateCreated = dateFormat.format(date) + "?";
        String campos = "" + "?";
        String delimeter = "|" + "?";
        String RRN = "" + "?";
        String numRegistros = "0" + "?";
        String lastestMod = System.getProperty("user.name");
        String Final = RRN + numRegistros + campos + delimeter + strDateCreated + lastestMod;
        return Final;

    }

    private boolean verifyOpen() {
        if (archivoCargado == null) {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo para "
                    + "realizar esa operación.", "No hay un archivo abierto",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private void loadFile(File file) {
        if (file == null) {
            return;
        }
        Scanner sc = null;
        archivoCargado = file;
        jLabel_current.setText("Current file: " + archivoCargado.getName());
        jTable_Display.setModel(new DefaultTableModel(0, 0));

        try ( FileReader fr = new FileReader(archivoCargado);  BufferedReader br = new BufferedReader(fr)) {

            try {
                sc = new Scanner(archivoCargado);
                sc.useDelimiter(";");
                boolean flag = true;
                while (sc.hasNext()) {
                    if (flag) {
                        String line = sc.nextLine();
                        System.out.println("line+" + line);
                        String[] data = line.split("\\?");
                        String[] dataColumn = data[2].split("\\|");
                        for (int i = 0; i < dataColumn.length; i++) {
                            System.out.println("datacol" + dataColumn[i]);
                        }
                        for (int i = 0; i < dataColumn.length; i++) {//Para cargar los registros en memoria una vez se abre el archivo
                            campos.add(dataColumn[i]);
                        }
                        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
                        model.setColumnIdentifiers(dataColumn);
                        flag = false;
                    }

                }
            } catch (Exception e) {

            }
        } catch (Exception e) {
        }
    }


    private LinkedList registros = new LinkedList();

    private ArrayList<String> campos = new ArrayList<String>();
    private File archivoCargado;
    private boolean saved = true; //Debe incicializarse en true porque por default no hay un archivo abierto. Al crear un archivo se hace false.

//debe inicializarse en false porque por default el archivo no se ha guardado, hayasé modificado o no
}
